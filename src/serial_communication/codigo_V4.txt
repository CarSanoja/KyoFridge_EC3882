/* ###################################################################
**     Filename    : main.c
**     Project     : led
**     Processor   : MC9S08QE128CLK
**     Version     : Driver 01.12
**     Compiler    : CodeWarrior HCS08 C Compiler
**     Date/Time   : 2018-05-05, 18:11, # CodeGen: 0
**     Abstract    :
**         Main module.
**         This module contains user's application code.
**     Settings    :
**     Contents    :
**         No public methods
**
** ###################################################################*/
/*!
** @file main.c
** @version 01.12
** @brief
**         Main module.
**         This module contains user's application code.
*/         
/*!
**  @addtogroup main_module main module documentation
**  @{
*/         
/* MODULE main */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "AS1.h"
#include "AD1.h"
#include "TI1.h"
/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* User includes (#include below this line is not maintained by Processor Expert) */
int i=0;
void main(void)
{
  /* Write your local variable definition here */
	// Variable que servira para almacenar cualquier error que ocurra
	unsigned char error;
	// Estructura que crea un farmato para las variales que almacenaran datos de los
	// sensores
	typedef union{
		unsigned char u8[2];
		unsigned int u16;
	}VALOR;
	// Variable que permite almacenar valor del sensor
	volatile VALOR iADC1,iADC2;
	volatile int d1;
	volatile VALOR aux1, aux2;
	unsigned int Enviados=2;
	unsigned char estado = WAIT;
	// Para poder enviar una trama por serial compuesta por 2 bytes y un encabezado
	// se define una lista que contenga todos los datos almacenados en un solo lugar
	// importamnte notar que se envia datos tipo caracter.
	unsigned char tADC[5] = {0xF5,0x00,0x00,0x00,0x00} ;

	/* Define LED's ON or OFF,*/
	#define ON 1
	#define OFF 0
	/* Define LED's*/
	#define LED1 PTCD_PTCD0
	/*Define Switch 1*/
	#define SW1 PTAD_PTAD2
	PTADD = 0xFB;  /*PortA bit 2 input all others outputs */
	PTCDD = 0xFF;  /*all port C outputs */
	PTCD = 0xFF;   /* turn off all LEDs */
	PTAPE = 0x04;  /*enable pullup on PTA bit 2 */


  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  /* For example: for(;;) { } */
for (;;){ //Loop infinito para captar y enviar datos siempre que sea posible
	/*Para el presente trabajo se presenta una maquina de estados capaz de iterar
	entre los diferentes procesos que son de interes: 
	1. Medir: recepcion de datos esde los sensores
	2. Acondicionamiento: tomar los datos de medicion y ajustar para ser enviados
	3. Enviar: Enviar la trama de datos por el puerto serial
	4. Esperar: permite realizar una pausa luego de ser enviado un dato */
	switch(estado){
	
		case WAIT:
			// Se activa la interrupcion TI1_OnInterrupt()
			break;
	
		case MEDIR:
			// SENSORES ANALOGICOS
			// Antes de cada medicion, verificar que no existe un error
			do{
			  error	= AD1_MeasureChan(TRUE, 0); // ADC realiza la medición
			}while(error!=ERR_OK);
			do{
			  error = AD1_GetChanValue16(0, &iADC1.u16); // Se obtiene el valor medido por el ADC y se almacena en iADC (nombre placeholder)
			}while(error!=ERR_OK);
			do{
			  error	= AD1_MeasureChan(TRUE, 1); // ADC realiza la medición
			}while(error!=ERR_OK);
			do{
			  error = AD1_GetChanValue16(1, &iADC2.u16); // Se obtiene el valor medido por el ADC y se almacena en iADC (nombre placeholder)
			}while(error!=ERR_OK);
			
			//SENSORES DIGITALES
			if (SW1) {
		        LED1 = ON;
     			d1 = 0x80;
    			} else {LED1 = OFF; d1 = 0x00;}


			estado = SET; // Una vez enviado, se avanza al otro estado para hacer el acondicionamiento de los datos
			break;
		
		case SET:
			
			// SENSORES ANALOGICOS
			// Las variables deben ser corridas a la derecha dado que el ADC movio los bits.
			iADC1.u16 = iADC1.u16 >> 4; // Se "shiftean" los bits 4 espacios hacia la derecha ya que el ADC movió los bits
			iADC1.u16 = iADC1.u16 & 0xFFF; // operador "and" con 0xFFF (12 primeros LSB en "set")
			// Ahora se debe colocar los 12 bits en formato de la trama
			// los ultimos 4 bits los obtenemos haciendo shift de 7 a la derecha
  			aux1.u16 = iADC1.u16 >> 7;
			aux1.u16 = aux1.u16 & 0x1F; // Aqui estan los primeros 5 bits
			iADC1.u16 = iADC1.u16 & 0x0EF; // Aqui estan los otros 7 bits
			tADC[1] = tADC[2] | aux1.u16; // Se guardan los 5 bits
			tADC[2] = tADC[3] | iADC1.u16; //Se guardan los 7 bits

			iADC2.u16 = iADC2.u16 >> 4; // Se "shiftean" los bits 4 espacios hacia la derecha ya que el ADC movió los bits
			iADC2.u16 = iADC2.u16 & 0xFFF; // operador "and" con 0xFFF (12 primeros LSB en "set")
			// Ahora se debe colocar los 12 bits en formato de la trama
			// los ultimos 4 bits los obtenemos haciendo shift de 7 a la derecha
  			aux2.u16 = iADC2.u16 >> 7;
			aux2.u16 = aux2.u16 & 0x1F; // Aqui estan los primeros 5 bits
			iADC2.u16 = iADC2.u16 & 0x0FF; // Aqui estan los otros 7 bits
			tADC[3] = tADC[4] | aux2.u16; // Se guardan los 5 bits
			tADC[4] = tADC[5] | iADC2.u16; // Se guardan los 7 bits
			
			tADC[1] = tADC[1] | d1; 

			estado = SEND; // Una vez ajustado los valores, se avanza al otro estado para hacer el envio de los datos

		case SEND:		  
  			for(i=0;i<5;i++){
				do{
					error = AS1_SendChar(tADC[i]);
				}while(error!=ERR_OK);}
  			
		  	estado = WAIT;	// una vez enviado, se espera a la próxima interrupción
	

		default:
			break;
	}
}

  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
 /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/
}
/* END main */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/
